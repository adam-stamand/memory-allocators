language: cpp


env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "J989SIRFWZe+sQi4APXQR9YZmkqJUnS0NmwjT/XKxBzJzMxYpk0yeJoH4L+Fz6l1xpzHf9KgG4FsAMag8ujClLpM09rCyh3K/xpn0QMV24CLoTk8LJuN56w3Kz7UwA+xjEEJ01gaPwfgV2zj3ArMKBSAtcKU6kME35+/7DXLODZcO3zNlbA+3caJpxGrAtF1jrtIOwtILuMNFZWxw3upWf1Rli6j9M8a0Mz2mTNWjFl+gNHp8evRBBhhc5yweTTkNCvg9fWO7BSqhuNkdSW13RwCetH8y19DmA3VtFeDPA537q+iM6jVTCH1HpgHXVQGsc9iCe74eXwJ7gWXH4g3ky1GprjQ9N01q5iuAqFfstnSZxRJ16QzAQgAB0zr9wcFPWvcY5zpFE16NHJ8jNdVPMIpbaiybuLMLqNvDdTc0LlY3eYLdYkcRIrdCZVj/Sxl7dNOv6/Uc8JN8QR9UTBJFFRx0NCXtJGdttHnnkcNvZi49VqwOtZI0ClsO9DWUGB05xmO4Cl+P2v6+WG1OBVjV0u0rCrbBBKqsNi0e7NC+/m8039cLnDg7WixRMZivl3bBX1c/dMytKO/YHbIYUZaBZODT7E/092p0PDiq0viP22LClUWExNpSXu+t6oaomLdhgGU8or7j9oacpI10U4TxMEpj9NYZGEFz8UkXRL2LMQ="



matrix:
  include:
  - os: linux
    dist: trusty
    compiler: gcc
    env:
      - COMPILER=g++-4.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: [g++-4.8, valgrind]
  - os: linux
    dist: trusty
    compiler: gcc
    env:
      - COMPILER=g++-4.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: [g++-4.9, valgrind]
  - os: linux
    dist: trusty
    compiler: gcc
    env:
      - COMPILER=g++-5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: [g++-5, valgrind]
  - os: linux
    dist: trusty
    compiler: gcc
    env:
      - COMPILER=g++-6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: [g++-6, valgrind]
  - os: linux
    dist: trusty
    compiler: gcc
    env:
      - COMPILER=g++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: [g++-7, valgrind]
      coverity_scan:
        project:
          name: "adam-stamand/memory-allocators"
        notification_email: adam.stamand@gmail.com
        build_command_prepend: ""
        build_command: ""
        branch_pattern: master

before_install:
  - sudo apt-get -qq update
  - sudo apt-get install -y libgtest-dev valgrind cmake
  - sudo wget https://github.com/google/googletest/archive/release-1.7.0.tar.gz
  - sudo tar xf release-1.7.0.tar.gz
  - cd googletest-release-1.7.0
  - sudo cmake -DBUILD_SHARED_LIBS=ON .
  - sudo make
  - sudo cp -a include/gtest /usr/include
  - sudo cp -a libgtest_main.so libgtest.so /usr/lib/
  - which valgrind
  - cd "${TRAVIS_BUILD_DIR}"
  - pip install --user cpp-coveralls
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
before_script:
  # Check versions of gcc, g++ and cmake
  - gcc -v && g++ -v && cmake --version
  # Run your build commands next
  - mkdir -p build && cd build
  - |
    cmake .. \
      --warn-uninitialized \
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
      -DCMAKE_CXX_STANDARD=$CPP
  - cmake --build .

script:
  - cd bin
  - ls -l
  - ./runTests
  - valgrind ./memory_allocator
after_success:
  - cd ..
  # - coveralls --exclude lib --exclude tests --gcov-options '\-lp'
notifications:
  email:
    on_success: never
    on_failure: change




# addons: &gcc48
#   apt:
#     packages:
#       - g++-4.8
#     sources:
#       - ubuntu-toolchain-r-test

# addons: &gcc7
#   apt:
#     packages:
#       - g++-7
#     sources:
#       - ubuntu-toolchain-r-test

# addons: &clang35
#   apt:
#     packages:
#       - clang-3.5
#     sources:
#       - ubuntu-toolchain-r-test
#       - llvm-toolchain-precise-3.5

# addons: &clang6
#   apt:
#     packages:
#       - clang-6.0
#     sources:
#       - ubuntu-toolchain-r-test
#       - llvm-toolchain-trusty-6.0


# matrix:
#   include:
#     # Test gcc-4.8: C++11, Build=Debug/Release
#     - env: GCC_VERSION=4.8 BUILD_TYPE=Debug CPP=11
#       os: linux
#       addons: *gcc48

#     - env: GCC_VERSION=4.8 BUILD_TYPE=Release CPP=11
#       os: linux
#       addons: *gcc48

#     - env: GCC_VERSION=7 BUILD_TYPE=Release CPP=11
#       os: linux
#       addons: *gcc7

#     # Test clang-3.5: C++11, Build=Debug/Release
#     - env: CLANG_VERSION=3.5 BUILD_TYPE=Debug CPP=11
#       os: linux
#       addons: *clang35

#     - env: CLANG_VERSION=3.5 BUILD_TYPE=Release CPP=11
#       os: linux
#       addons: *clang35

#       # Test clang-6.0: C++11, Build=Debug, ASAN=On
#     - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=11 ASAN=On TSAN=Off
#       os: linux
#       addons: *clang6

#     - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=11 ASAN=On TSAN=Off
#       os: linux
#       addons: *clang6

#       # osx
#     - env: BUILD_TYPE=Release CPP=11 ASAN=Off TSAN=Off
#       os: osx




# before_script:
#   - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
#   - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
#   - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CXX="clang++" CC="clang"; fi
#   - which $CXX
#   - which $CC
#   - $CXX --version
#   - cmake --version

# script:
#   - cd ${TRAVIS_BUILD_DIR}
#   - mkdir -p build && cd build
#   - |
#     cmake .. \
#       --warn-uninitialized \
#       -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
#       -DCMAKE_CXX_STANDARD=$CPP \
#       -DSPDLOG_BUILD_EXAMPLES=ON \
#       -DSPDLOG_BUILD_BENCH=OFF \
#       -DSPDLOG_BUILD_TESTS=ON \
#       -DSPDLOG_SANITIZE_ADDRESS=$ASAN \
#       -DSPDLOG_SANITIZE_THREAD=$TSAN
#   - make VERBOSE=1 -j2 && cd bin
#   - runTests



# notifications:
#   email: false
